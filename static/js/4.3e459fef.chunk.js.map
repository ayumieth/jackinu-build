{"version":3,"sources":["views/Farms/components/header/header.module.css","../node_modules/react-use/esm/misc/util.js","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FasmList/FarmList.tsx","views/Farms/components/FasmList/StakeAction.tsx","views/Farms/components/FasmList/CardActionsContainer.tsx","views/Farms/components/FasmList/DetailsSection.tsx","views/Farms/components/FasmList/CardHeading.tsx","views/Farms/components/FasmList/ApyCalculatorModal.tsx","views/Farms/components/header/index.tsx","views/Farms/Farms.tsx"],"names":["module","exports","Wrapper","styled","div","noText","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","style","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","isCommunityFarm","coin1","split","coin2","alignItems","mb","src","alt","width","height","border","borderRadius","position","top","left","background","flexDirection","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","pl","fontSize","toLocaleString","placeholder","size","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","account","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","isSpecial","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","backgroundColor","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","props","FarmCard","bnbPrice","ethPrice","dukePrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","tokenSymbol","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","JACK","ETH","DUKE","Number","undefined","maximumFractionDigits","earnLabel","dual","farmAPY","slice","liquidityUrlPathParts","PANCAKE_ADD_LIQUIDITY_URL","display","CardActionsContainer","card","Header","setColor","showHambuger","setShowHambuger","handleScrollbar","window","pageYOffset","useEffect","addEventListener","Box","id","className","styles","header_body","sx","zIndex","transition","header_container","marginRight","menu_item","Stack","header_left","direction","spacing","header_right","target","IconButton","menu_btn","marginTop","hambuger_menu","flexWrap","Farms","path","useRouteMatch","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWeb3React","ethPriceUsd","usePriceEthBusd","dukePriceBusd","usePriceDukeBusd","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stakedOnly","filter","Cookies","get","activeFarms","indexOf","inactiveFarms","stakedOnlyFarms","userData","oldFarms","farmsList","farmsToDisplay","map","tokenAmount","cakeRewardPerYear","amountFastTokens","totalLiquidityWithoutPrice","pow","Page","exact"],"mappings":"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","file":"static/js/4.3e459fef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_container\":\"header_header_container__2_6sv\",\"header_left\":\"header_header_left__18UmP\",\"header_right\":\"header_header_right__7Y7xc\",\"menu_btn\":\"header_menu_btn__2JCwL\",\"menu_item\":\"header_menu_item__2YMNs\",\"hambuger_menu\":\"header_hambuger_menu__3KUDM\",\"header_body\":\"header_header_body__2nWjQ\"};","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@jackinu-uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n  noText?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div<{ noText: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  width: ${({noText}) => noText ? '72px' : '100%'}\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded, noText=false }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" noText={noText}  role=\"button\" onClick={() => onClick()}>\r\n      {!noText && <Text color=\"#d2793d\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>}\r\n      {expanded ? <ChevronUpIcon color='#d2793d' /> : <ChevronDownIcon color='#d2793d' />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@jackinu-uikit'\r\nimport { FarmWithStakedValue } from '../FasmList/FarmList'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  farm?: FarmWithStakedValue\r\n  account?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    color:white;\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: white;\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color='#d2793d'>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl} style={{color:'white'}}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text color='#d2793d'>{TranslateString(737, 'Total Liquidity')}:</Text>\r\n          <Text color='white'>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link color='#d2793d' external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@jackinu-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  border: none;\r\n  background: #e5894c;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n}) => {\r\n  const coin1 = farmImage.split('-')[0]\r\n  const coin2 = farmImage.split('-')[1].split('.')[0]\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"flex-start\" mb=\"12px\">\r\n      <img src={`/images/tokens/${coin2}.png`} alt={coin2} width={28} height={28} style={{border:'1.5px solid #566FFE', borderRadius:20}} />\r\n      <img src={`/images/tokens/${coin1}.png`} alt={coin1} width={36} height={36} style={{position: 'absolute', top: 40, left: 40, border:'1.5px solid #566FFE', borderRadius:20, background:'white'}} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading color='#d2793d' mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          <MultiplierTag  variant=\"primary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@jackinu-uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@jackinu-uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(271, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(316, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(272, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(273, 'Pending Confirmation') : TranslateString(274, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(275, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@jackinu-uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(276, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(277, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(272, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(273, 'Pending Confirmation') : TranslateString(274, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@jackinu-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(316, 'Stake')} LP</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@jackinu-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@jackinu-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (farm.isSpecial === 'duke' || farm.isSpecial === 'fast' || farm.isSpecial === 'both') ? (\r\n      <Button width=\"100%\" mt=\"8px\">\r\n        Coming Soon\r\n        {/* {TranslateString(741, 'Coming Soon')} */}\r\n      </Button>\r\n    ) :\r\n      (\r\n        <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(741, 'Approve Contract')}\r\n        </Button>\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color='#d2793d' fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          JACK\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color='#d2793d' fontSize=\"12px\">\r\n          {TranslateString(743, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text  bold textTransform=\"uppercase\" color='#d2793d' fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\"color='#d2793d' fontSize=\"12px\">\r\n          {TranslateString(739, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton width=\"100%\" mt=\"20px\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@jackinu-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"#d2793d\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"#d2793d\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"#d2793d\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'FAST per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"#d2793d\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl} style={{color:'#d2793d'}}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@jackinu-uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\r\n  const [showModal, setShowModal] = useState<boolean>(false);\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  \r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon style={{color:'white', backgroundColor:'white'}} />\r\n    </IconButton>\r\n    \r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@jackinu-uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL, PANCAKE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 30px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  \r\n  background: #0b0c22;\r\n  border-radius: 30px;\r\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center; \r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber,\r\n  dukePrice?: BigNumber,\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, dukePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.JACK) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    // Duke\r\n    if (farm.quoteTokenSymbol === QuoteToken.DUKE) {\r\n      return dukePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase()\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'JACK'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\r\n\r\n  const { quoteTokenAdresses, tokenSymbol, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ tokenAddresses: quoteTokenAdresses, quoteTokenSymbol: tokenSymbol, quoteTokenAdresses: tokenAddresses })\r\n  const addLiquidityUrl = `${PANCAKE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {(farm.tokenSymbol === 'FAST' || farm.tokenSymbol === 'DUKE') && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text color=\"#d2793d\">{TranslateString(736, 'APR')}:</Text>\r\n          <Text  bold style={{ display: 'flex', alignItems: 'center', color:'white' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton  lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text  color=\"#d2793d\"  >{TranslateString(318, 'Earned')}:</Text>\r\n        <Text bold color='white'>{earnLabel}</Text>\r\n      </Flex>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n        <Text>$520.486.664</Text>\r\n      </Flex> */}\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n        noText={false}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, { useMemo, useState } from 'react'\r\nimport { useMedia } from 'react-use'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@jackinu-uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 30px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nexport const FList = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  padding: 9px 20px;\r\n  position: relative;\r\n  text-align: center;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  margin-bottom: 0px;\r\n\r\n  & > * {\r\n    font-size: 18px;\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n  box-shadow: 0px 0px 4px rgb(0 0 0 / 25%);\r\n`\r\n\r\ninterface FarmListProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber,\r\n  dukePrice?: BigNumber,\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmList: React.FC<FarmListProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, dukePrice, account }) => {\r\n  const TranslateString = useI18n()\r\n  const isMobile = useMedia('(max-width:800px)')\r\n  const isSmMobile = useMedia('(max-width:430px)')\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.JACK) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    // Duke\r\n    if (farm.quoteTokenSymbol === QuoteToken.DUKE) {\r\n      return dukePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase()\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'JACK'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <FList>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          farmImage={farmImage}\r\n          tokenSymbol={farm.tokenSymbol}\r\n        />\r\n        {!isSmMobile && <Text bold mt=\"0px\" style={{ margin: 'auto 0', width: 90 }}>{earnLabel}</Text>}\r\n        <Text bold style={{ display: 'flex', alignItems: 'center', width: 120 }}>\r\n          {farm.apy ? (\r\n            <>\r\n              {farmAPY}%\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n        {!isMobile && <>\r\n          <Text bold style={{ margin: 'auto 0', width: 150 }}>{totalValueFormated}</Text>\r\n          <Text bold style={{ margin: 'auto 0', width: 120 }}>{farm.multiplier}</Text>\r\n        </>}\r\n        {/* <Text bold style={{margin:'auto 0', width: 130}}>0</Text>\r\n        <Text bold style={{margin:'auto 0', width: 100}}>0</Text> */}\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n          noText\r\n        />\r\n      </FList>\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n          farm={farm}\r\n          account={account}\r\n        />\r\n      </ExpandingWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default FarmList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@jackinu-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(316, 'Stake')} LP</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport { useMedia } from 'react-use'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@jackinu-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  width: calc(100% - 300px);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  min-width: 562px;\r\n  @media (max-width: 1160px) {\r\n    min-width: 100%;\r\n  }\r\n  @media (max-width: 645px) {\r\n    flex-wrap: wrap;\r\n  }\r\n`\r\n\r\nconst Rect = styled.div`\r\n  border: 3px solid #536BF1;\r\n  border-radius: 19px;\r\n  min-width: 275px;\r\n  padding: 12px 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const isMedia = useMedia('(max-width: 645px)')\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (farm.isSpecial === 'duke' || farm.isSpecial === 'fast' || farm.isSpecial === 'both') ? (\r\n      <Button width=\"100%\" mt=\"8px\">\r\n        Coming Soon\r\n        {/* {TranslateString(741, 'Coming Soon')} */}\r\n      </Button>\r\n    ) :\r\n      (\r\n        <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(741, 'Approve Contract')}\r\n        </Button>\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Rect style={{ margin: isMedia ? '0px 0px 10px 0px' : '0px 10px 0px 0px' }}>\r\n        <Flex>\r\n          <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\r\n            {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n            JACK\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\r\n            {TranslateString(743, 'Earned')}\r\n          </Text>\r\n        </Flex>\r\n        <HarvestAction earnings={earnings} pid={pid} />\r\n      </Rect>\r\n      <Rect>\r\n        <Flex>\r\n          <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\" pr=\"3px\">\r\n            {lpName}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"primary\" fontSize=\"12px\">\r\n            {TranslateString(739, 'Staked')}\r\n          </Text>\r\n        </Flex>\r\n        {!account ? <UnlockButton width=\"100%\" mt=\"20px\" /> : renderApprovalOrStakeButton()}\r\n      </Rect>\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@jackinu-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Farm } from 'state/types'\r\nimport CardActionsContainer from './CardActionsContainer'\r\n\r\ninterface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n  farm?: FarmWithStakedValue\r\n  account?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 9px 20px;\r\n  background-color: white;\r\n  box-shadow: 0px 0px 4px rgb(0 0 0 / 25%);\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst Info = styled.div`\r\n  width: 248px;\r\n  @media (max-width: 1160px) {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n  farm,\r\n  account\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\" flexWrap=\"wrap\" alignItems=\"center\">\r\n        <Info>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{TranslateString(316, 'Stake')}:</Text>\r\n            <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n          </Flex>\r\n          {!removed && (\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text>{TranslateString(737, 'Total Liquidity')}:</Text>\r\n              <Text>{totalValueFormated}</Text>\r\n            </Flex>\r\n          )}\r\n          <Flex justifyContent=\"flex-start\">\r\n            <Link external href={bscScanAddress} bold={false}>\r\n              {TranslateString(356, 'View on BscScan')}\r\n            </Link>\r\n          </Flex>\r\n        </Info>\r\n        <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMedia } from 'react-use'\r\nimport { Tag, Flex, Heading } from '@jackinu-uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  isMobile?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n  align-items: center;\r\n  width: calc(100% - 505px);\r\n  @media (max-width: 800px) {\r\n    width: calc(100% - 205px);\r\n  }\r\n  @media (max-width: 430px) {\r\n    min-width: calc(100% - 100px);\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  farmImage,\r\n}) => {\r\n  const coin1 = farmImage.split('-')[0]\r\n  const coin2 = farmImage.split('-')[1].split('.')[0]\r\n  return (\r\n    <Wrapper justifyContent=\"flex-start\">\r\n      <div style={{ width: 40, height: 44 }}>\r\n        <img src={`/images/tokens/${coin2}.png`} alt={coin2} width={25} height={25} style={{border:'1.5px solid #566FFE', borderRadius:20}} />\r\n        <img src={`/images/tokens/${coin1}.png`} alt={coin1} width={30} height={30} style={{position: 'absolute', top: 23, left: 35, border:'1.5px solid #566FFE', borderRadius:20, background:'white'}} />\r\n      </div>\r\n      <div style={{ textAlign: 'left', paddingLeft: 8, width: 180, marginTop: 10 }}>\r\n        <Heading mb=\"8px\" ml=\"12px\" style={{ fontWeight: 800, fontSize:18 }}>{lpLabel.replace('LP', '')}</Heading>\r\n      </div>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@jackinu-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'FAST per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Box, Stack, IconButton } from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport styles from './header.module.css';\r\n\r\n\r\n\r\nconst Header = () => {\r\n  const [color, setColor] = useState<string>('transparent');\r\n  const [showHambuger, setShowHambuger] = useState<boolean>(false);\r\n  const handleScrollbar = () => {\r\n    if(window.pageYOffset < 100) setColor(\"transparent\");\r\n    else if( window.pageYOffset >= 100 ) setColor('black');\r\n    else if( window.pageYOffset >= 300 ) setColor('#020207');\r\n  }\r\n\r\n  useEffect(() => {\r\n   window.addEventListener('scroll', handleScrollbar) \r\n  });\r\n\r\n  return(\r\n    <>\r\n      <Box id='header' className={styles.header_body} sx={{width: '100%', background: `${color}` , position:'fixed', top:'0px', zIndex:'3 !important', transition: '0.5s'}}>\r\n        <Box  className={  styles.header_container}>\r\n          <a href='/' style={{marginRight:'20px'}} ><img src='./images/landing/logo.png' alt='logo' /></a>\r\n          <Box className={styles.menu_item}>\r\n            <Stack className={styles.header_left}  direction='row' alignItems='center' spacing={2}>\r\n            {/* <Link containerId=\"about\" spy={true} smooth={true} className=\"menuitem\">Grill section</Link> */}\r\n            </Stack>\r\n            <Stack className={styles.header_right} justifyContent='right'  direction='row' alignItems='center' spacing={2}>\r\n              <a href='jack-inu.gitbook.io/docs/' target='_blank'>WHITEPAPER</a>\r\n              <a href='/'>BUY JACK</a>\r\n              <a href='/'>PLAY BONE HUNTER</a>\r\n              <a href='/farms'>EARN</a>\r\n            </Stack>\r\n          </Box>\r\n\r\n          <IconButton onClick={() => setShowHambuger(!showHambuger)} className={styles.menu_btn} sx={{ background:'#d2793d', width:'60x', height:'40px', borderRadius:'8px', marginTop:'50px', marginRight:'10px'}}>\r\n              <MenuIcon sx={{color:'white'}}/>\r\n          </IconButton>\r\n        </Box>\r\n\r\n        {\r\n          showHambuger &&\r\n            <Stack className={styles.hambuger_menu} direction='column' spacing={2}>\r\n              \r\n              <Stack className={styles.header_right}  direction='row' alignItems='start'  flexWrap='wrap'>\r\n                <a href='jack-inu.gitbook.io/docs/' target='_blank'>WHITEPAPER</a>\r\n                <a href='/'>BUY JACK</a>\r\n                <a href='/'>PLAY BONE HUNTER</a>\r\n                <a href='/farms'>EARN</a>\r\n              </Stack>\r\n            </Stack>\r\n        }\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default Header;","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useMedia } from 'react-use'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport Cookies from 'js-cookie'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Text } from '@jackinu-uikit'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd, usePriceDukeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmList, { FList } from './components/FasmList/FarmList'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Header from './components/header'\r\n\r\n\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    width: 100%;\r\n    font-size: 18px !important; \r\n    :last-child {\r\n      border-bottom-left-radius: 28px;\r\n      border-bottom-right-radius: 28px;\r\n    }\r\n  }\r\n`\r\n\r\nconst FarmListHeader = () => {\r\n  const isMobile = useMedia('(max-width: 800px)')\r\n  const isSmMobile = useMedia('(max-width:430px)')\r\n  const wth = !isMobile ? 'calc(100% - 505px)' : isSmMobile ? 'calc(100% - 100px)' : 'calc(100% - 224px)';\r\n\r\n  return (\r\n    <FList style={{ height: 66, borderTopLeftRadius: 28, borderTopRightRadius: 28, alignItems: 'center' }}>\r\n      <Text bold color=\"primary\" style={{ minWidth: wth }}>Token Pair</Text>\r\n      {!isSmMobile && <Text bold color=\"primary\" style={{ width: 90 }}>Earned</Text>}\r\n      <Text bold color=\"primary\" style={{ width: 120 }}>APY</Text>\r\n      {!isMobile && <>\r\n        <Text bold color=\"primary\" style={{ width: 150 }}>Liquidity</Text>\r\n        <Text bold color=\"primary\" style={{ width: 145 }}>Multiplier</Text>\r\n      </>}\r\n      {/* <Text bold color=\"primary\" style={{width:130}}>Staked(MLP)</Text>\r\n      <Text bold color=\"primary\" style={{width:100}}>Rewards</Text> */}\r\n    </FList>\r\n  )\r\n};\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account } = useWeb3React()\r\n  const ethPriceUsd = usePriceEthBusd()\r\n  // const fastPriceUsd = usePriceFastBusd()\r\n  const dukePriceBusd = usePriceDukeBusd()\r\n\r\n  const TranslateString = useI18n()\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n  const [filter, setFilter] = useState('')\r\n  const [viewMode, setViewMode] = useState(!!Cookies.get('viewMode'))\r\n  const [specialOnly, setSpecialOnly] = useState('all')\r\n\r\n  let activeFarms = farmsLP.filter((farm) => farm.pid !== -1 && farm.multiplier !== '0X')\r\n  if (filter !== '') {\r\n    activeFarms = activeFarms.filter((farm) => farm.lpSymbol.indexOf(filter.toUpperCase()) !== -1)\r\n  }\r\n  let inactiveFarms = farmsLP.filter((farm) => farm.pid !== -1 && farm.multiplier === '0X')\r\n  if (filter !== '') {\r\n    inactiveFarms = inactiveFarms.filter((farm) => farm.lpSymbol.indexOf(filter.toUpperCase()) !== -1)\r\n  }\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  const dukeOnlyFarms = activeFarms.filter((farm) => farm.isSpecial === 'duke' || farm.isSpecial === 'both')\r\n  const fastOnlyFarms = activeFarms.filter((farm) => farm.isSpecial === 'new' || farm.isSpecial === 'new')\r\n  const oldFarms = activeFarms.filter((farm) => farm.isSpecial === 'no')\r\n\r\n  // /! This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerYear = new BigNumber(farm.amountFastTokens).div(60).times(365)\r\n\r\n        let apy;\r\n        if (farm.quoteTokenSymbol === 'DUKE') {\r\n\r\n          // In case of DUKE, Decimal is 9\r\n          apy = dukePriceBusd\r\n            .times(cakeRewardPerYear)\r\n            .div(new BigNumber(farm.totalLiquidityWithoutPrice).times(cakePrice)).times(new BigNumber(10).pow(8))\r\n        }\r\n        else {\r\n\r\n          apy = cakePrice\r\n            .times(cakeRewardPerYear)\r\n            .div(new BigNumber(farm.totalLiquidityWithoutPrice).times(bnbPrice))\r\n        }\r\n        return { ...farm, apy }\r\n      })\r\n        return farmsToDisplayWithAPY.filter(farm => farm.pid < 1).map((farm) => (\r\n          <FarmCard\r\n            key={farm.pid}\r\n            farm={farm}\r\n            removed={removed}\r\n            bnbPrice={bnbPrice}\r\n            cakePrice={cakePrice}\r\n            ethPrice={ethPriceUsd}\r\n            dukePrice={dukePriceBusd}\r\n            account={account}\r\n          />\r\n        ))\r\n    },\r\n    [bnbPrice, ethPriceUsd, cakePrice, account],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Header/>\r\n    \r\n      <Page>\r\n        <div>\r\n          <FlexLayout>\r\n              <Route exact path={`${path}`}>\r\n                {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(oldFarms, false)}\r\n              </Route>\r\n              <Route exact path={`${path}/history`}>\r\n                {farmsList(inactiveFarms, true)}\r\n              </Route>\r\n          </FlexLayout> \r\n\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}